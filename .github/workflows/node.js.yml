# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]

jobs:
  start:
    name: PULL
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [18.x]
    #     # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: |
          touch ./server/.env
          echo "${{secrets.PROD_ENV_PRODUCTOS }}" > ./server/.env
          cd server 
          npm ci
          npm test
  env:
    name: DEPLOY
    needs: start
    runs-on: self-hosted
    steps:
      - name: ENV BACK
        #working-directory: ./server/src
        run: |
         touch ./server/.env
         echo "${{secrets.PROD_ENV_PRODUCTOS }}" > ./server/.env

         if docker ps -a --format '{{.Names}}' | grep -q "container-productos"; then
          echo "Eliminando contenedor 'container-productos'..."
          docker rm -f container-productos
         else
          echo "El contenedor 'container-productos' no existe."
         fi
          
         if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "img-productos"; then
          echo "Eliminando imagen 'img-productos'..."
          docker rmi -f img-productos
         else
          echo "La imagen 'img-productos' no existe."
         fi

         docker build -t img-productos -f ./server/Dockerfile ./server
         docker run --name container-productos -d -p 8000:8000 img-productos
         #docker-compose up --build -d

         #npm run build --prod --output-path=/var/www/html
         cd client
         npm install
         ng build --configuration production
         sudo cp -rf dist/ /var/www
         
         
         

         
  # build:
  #   name: DEPLOY
  #   needs: env
  #   runs-on: self-hosted
  #   steps:
  #     - name: build
  #       #working-directory: ./server
  #       run: |

  #         #rm -f /var/www/dist
  #         #cp -r ./client/dist /var/www

    