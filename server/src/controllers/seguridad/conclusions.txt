Explicación de cada parte:
res.cookie("token", token, {...}):

res.cookie() es un método de Express utilizado para establecer una cookie en la respuesta HTTP que se envía al cliente.
"token" es el nombre de la cookie, en este caso se llama "token".
token es el valor que se almacenará dentro de la cookie. Usualmente, esto sería un valor como un JWT (JSON Web Token) o algún identificador único asociado a la sesión del usuario.
Por ejemplo, si el valor de token es abc123xyz, se establecerá una cookie con el nombre token y el valor abc123xyz.

expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000):

La opción expires define la fecha de expiración de la cookie. Especifica cuándo debe dejar de estar válida la cookie.
Date.now() obtiene el valor actual en milisegundos desde el 1 de enero de 1970 (la "época Unix").
7 * 24 * 60 * 60 * 1000 calcula los milisegundos correspondientes a 7 días.
7 días = 7 días × 24 horas × 60 minutos × 60 segundos × 1000 milisegundos = 604800000 milisegundos.
El valor new Date(Date.now() + 604800000) define una fecha futura, exactamente 7 días a partir de ahora. Esto significa que la cookie expirará después de 7 días desde su creación.
httpOnly: false:

La opción httpOnly especifica si la cookie puede ser accedida por JavaScript en el navegador.
Si es true, la cookie solo se podrá acceder a través de las solicitudes HTTP (es decir, no podrá ser leída ni manipulada mediante JavaScript en el navegador, protegiéndola de ataques XSS).
Si es false (como en este caso), la cookie sí será accesible a través de JavaScript. Esto puede ser útil si necesitas leer la cookie desde el cliente, pero es menos seguro, ya que un atacante que inyecte código JavaScript malicioso podría robarla.
sameSite: "none":

sameSite controla cómo se envían las cookies en solicitudes entre sitios (Cross-Site).
"Strict": La cookie solo se envía si la solicitud proviene del mismo sitio (dominio).
"Lax": La cookie se envía en solicitudes de navegación entre sitios como en los enlaces de navegación, pero no en solicitudes POST.
"None": La cookie se envía en todas las solicitudes, incluso en solicitudes de otros sitios. Este valor requiere que también se establezca la opción secure: true, lo que significa que solo se enviará la cookie sobre HTTPS.
En este caso, "None" permite que la cookie se envíe en solicitudes entre sitios (por ejemplo, si tienes tu frontend y backend en dominios diferentes), lo cual es común en aplicaciones de una sola página (SPA) o aplicaciones que hacen cross-origin requests.
secure: true:

secure especifica si la cookie solo debe ser enviada sobre HTTPS.
Si está configurado en true, la cookie solo se enviará cuando la conexión sea segura (es decir, sobre HTTPS). Esto es esencial para proteger la cookie de ser interceptada por atacantes en redes no seguras (como en una red Wi-Fi pública).
En entornos de desarrollo, es posible que utilices false si no tienes HTTPS habilitado, pero en producción siempre deberías usar HTTPS y secure: true para mayor seguridad.
domain: "localhost":

La opción domain especifica el dominio en el cual la cookie estará disponible.
En este caso, "localhost" significa que la cookie solo estará disponible para el dominio localhost (usado comúnmente en entornos de desarrollo).
Si pusieras, por ejemplo, domain: "example.com", la cookie sería accesible para todos los subdominios de example.com (por ejemplo, api.example.com y www.example.com).
Si no se especifica un dominio, se usará el dominio del sitio actual (por ejemplo, si tu frontend está en localhost:3000, la cookie solo estará disponible en ese dominio).
Resumen de la configuración de la cookie:
token: El nombre de la cookie.
token (valor): El valor del token que se guarda dentro de la cookie.
expires: La cookie expirará 7 días después de su creación.
httpOnly: false: La cookie es accesible a JavaScript.
sameSite: "none": La cookie se enviará en solicitudes de otros sitios (entre dominios).
secure: true: La cookie solo se enviará a través de HTTPS.
domain: "localhost": La cookie solo será accesible en el dominio localhost (usado típicamente en entornos de desarrollo).
Notas adicionales:
¿Por qué usar sameSite: "none"?

Se usa generalmente en aplicaciones donde el frontend y el backend están en diferentes dominios (por ejemplo, frontend.com y api.com). Esta configuración permite que la cookie sea enviada en solicitudes entre dominios. Recuerda que si usas sameSite: "none", también necesitas secure: true, lo que obliga a usar HTTPS.
¿Por qué httpOnly: false?

Usar httpOnly: false puede ser útil si necesitas acceder al contenido de la cookie desde JavaScript (por ejemplo, si deseas leer el token JWT almacenado en la cookie desde el navegador). Sin embargo, esto reduce la seguridad ya que un atacante podría potencialmente robar la cookie en un ataque XSS. En la mayoría de los casos, es recomendable mantener httpOnly: true para proteger la cookie de accesos no autorizados desde el cliente.
Recomendaciones para producción:
En producción, es altamente recomendable usar httpOnly: true para proteger la cookie de accesos maliciosos.
Usa siempre secure: true y habilita HTTPS en tu servidor, ya que esto protegerá tus cookies de ser interceptadas por atacantes.
Si tu aplicación es de una sola página (SPA) y utiliza un backend en un dominio distinto, puedes necesitar configurar sameSite: "none" junto con secure: true para que las cookies se envíen correctamente.
Si tienes más dudas o necesitas aclarar algo más, ¡no dudes en preguntar!